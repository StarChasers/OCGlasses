import org.gradle.api.tasks.bundling.Jar

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'com.palominolabs.gradle.task:gradle-git-clone-task:0.0.3'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

// java version
sourceCompatibility = "1.8"
targetCompatibility = "1.8"

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

version = modVersion
group = modGroup
archivesBaseName = modBaseName

def getGitRef() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Throwable e) {
        return "unknown"
    }
}

if (System.getenv("PROMOTED_NUMBER") != null)
    buildNumber = "${System.getenv("PROMOTED_NUMBER")}"
else if (System.getenv("BUILD_NUMBER") != null)
    buildNumber = "${System.getenv("BUILD_NUMBER")}"
else
    buildNumber = "+" + getGitRef()

minecraft {
    replace "@VERSION@", version
    replace "@BUILD@", project.buildNumber
    version = "${minecraftVersion}-${forge_version}"
    runDir = "run"
    mappings = mcp_mappings
}

runClient {
    jvmArgs '-Dfml.coreMods.load=li.cil.oc.common.launch.TransformerLoader'
}

runServer {
    jvmArgs '-Dfml.coreMods.load=li.cil.oc.common.launch.TransformerLoader'
}

repositories {
    maven { url = "http://maven.cil.li/" }          // OpenComputers
    maven { url = "https://maven.mcmoddev.com/" }   // Baubles
}

configurations {
    extraLibs
    compileOnly.extendsFrom extraLibs
}

dependencies {
    provided "li.cil.oc:OpenComputers:${openComputersVersion}"

    compileOnly "com.azanor:Baubles:${baublesVersion}"
    compileOnly "li.cil.manual:RTFM:${rtfmVersion}"

    extraLibs files("libs/commons0815/Commons0815-${commons_version}-dev.jar")

    provided ("mrtjp:ProjectRed:${projredVersion}:Base") {
        exclude module: "NotEnoughItems"
        exclude module: "CodeChickenLib"
        exclude module: "jei_1.12"
        exclude module: "ForgeMultipart"
    }
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version':project.version + "-" + project.ext.buildNumber, 'mcversion':project.minecraftVersion
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }



task flushWiki(type: Delete) {
    delete "src/main/resources/assets/openglasses/doc"
}

task syncGitWiki(type: com.palominolabs.gradle.task.git.clone.GitCloneTask) {
    dir = file("src/main/resources/assets/openglasses/doc")
    uri = 'https://github.com/StarChasers/OCGlasses.wiki.git'
    treeish = "origin/master"
    forceFetch = true
}

jar {
    classifier = project.buildNumber
    
    manifest {
        attributes([
                "Maven-Artifact":"${project.group}:${project.archivesBaseName}:${project.version}",
                'Timestamp': System.currentTimeMillis(),
                'ContainedDeps': "Commons0815-${commons_version}.jar",
        ])
    }

    from("libs/Commons0815-${commons_version}.jar"){
        into ("META-INF/libraries")
    }
}


task devJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.allJava
    classifier = 'dev'
    manifest {
        attributes 'FMLAT': 'openglasses_at.cfg'
    }
}

artifacts {
    archives devJar
}

syncGitWiki.dependsOn(flushWiki)
build.dependsOn(syncGitWiki)
